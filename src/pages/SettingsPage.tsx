import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Download, FileText, Upload, Trash2 } from 'lucide-react';
import { useApp } from '../context';
import { CURRENCIES, AppSettings } from '../types';
import { Dropdown } from '../components/Dropdown';
import { ThemeToggle } from '../components/ThemeToggle';
import VersionInfo from '../components/VersionInfo';

const settingsVariants = {
  hidden: { opacity: 0 },
  visible: {
    opacity: 1,
    transition: {
      staggerChildren: 0.1,
      delayChildren: 0.1
    }
  }
};

const cardVariants = {
  hidden: { opacity: 0, y: 20 },
  visible: { 
    opacity: 1, 
    y: 0,
    transition: { duration: 0.2 }
  }
};

export function SettingsPage() {
  const { state, updateSettings, exportData, importData, clearAllData, formatCurrency } = useApp();
  const [isExporting, setIsExporting] = useState(false);
  const [isImporting, setIsImporting] = useState(false);
  const [isClearing, setIsClearing] = useState(false);

  const handleCurrencyChange = (currencyCode: string) => {
    const currency = CURRENCIES.find(c => c.code === currencyCode);
    if (currency) {
      const newSettings: AppSettings = {
        ...state.settings,
        currency
      };
      updateSettings(newSettings);
    }
  };

  const currencyOptions = CURRENCIES.map(currency => ({
    value: currency.code,
    label: `${currency.symbol} ${currency.name} (${currency.code})`
  }));

  const handleRetentionChange = (months: number) => {
    const newSettings: AppSettings = {
      ...state.settings,
      historyRetentionMonths: months
    };
    updateSettings(newSettings);
  };

  const handleThemeChange = (theme: 'light' | 'dark' | 'system') => {
    const newSettings: AppSettings = {
      ...state.settings,
      theme
    };
    updateSettings(newSettings);
  };

  const retentionOptions = [
    { value: '3', label: '3 months' },
    { value: '6', label: '6 months' },
    { value: '12', label: '12 months' },
    { value: '24', label: '24 months' },
    { value: '36', label: '36 months' }
  ];

  const handleExportFormatted = async () => {
    try {
      setIsExporting(true);
      
      // Generate formatted text
      let formattedText = '💰 FINANCIAL TRACKER SUMMARY\n';
      formattedText += '═══════════════════════════════\n\n';
      
      if (state.budgets.length === 0) {
        formattedText += 'No budget data available.\n';
      } else {
        const sortedBudgets = [...state.budgets].sort((a, b) => b.month.localeCompare(a.month));
        
        sortedBudgets.forEach((budget, index) => {
          const [year, month] = budget.month.split('-');
          const date = new Date(parseInt(year), parseInt(month) - 1);
          const monthName = date.toLocaleDateString('en-US', { year: 'numeric', month: 'long' });
          
          formattedText += `📅 ${monthName}\n`;
          formattedText += '─'.repeat(30) + '\n';
          
          const totalAllocated = budget.categories.reduce((sum, cat) => sum + cat.allocated, 0);
          const totalSpent = budget.categories.reduce((sum, cat) => sum + cat.spent, 0);
          const freeMoney = budget.spendingLimit - totalAllocated;
          
          formattedText += `💳 Monthly Limit: ${formatCurrency(budget.spendingLimit)}\n`;
          formattedText += `📊 Total Allocated: ${formatCurrency(totalAllocated)}\n`;
          formattedText += `💸 Total Spent: ${formatCurrency(totalSpent)}\n`;
          formattedText += `💰 Free Money: ${formatCurrency(freeMoney)}\n\n`;
          
          if (budget.categories.length > 0) {
            formattedText += '📋 CATEGORIES:\n';
            budget.categories.forEach(category => {
              const remaining = category.allocated - category.spent;
              const percentage = category.allocated > 0 ? Math.round((category.spent / category.allocated) * 100) : 0;
              
              formattedText += `  • ${category.name}\n`;
              formattedText += `    Allocated: ${formatCurrency(category.allocated)}\n`;
              formattedText += `    Spent: ${formatCurrency(category.spent)} (${percentage}%)\n`;
              formattedText += `    Remaining: ${formatCurrency(remaining)}\n\n`;
            });
          }
          
          formattedText += '\n';
        });
      }
      
      formattedText += '\n💡 Generated by Financial Tracker PWA\n';
      formattedText += `📅 Export Date: ${new Date().toLocaleDateString()}\n`;
      
      // Create and download as text file
      const blob = new Blob([formattedText], { type: 'text/plain;charset=utf-8' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `financial-summary-${new Date().toISOString().split('T')[0]}.txt`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
      
      alert('Formatted summary exported successfully!');
    } catch (error) {
      alert('Failed to export formatted summary');
    } finally {
      setIsExporting(false);
    }
  };

  const handleExport = async () => {
    try {
      setIsExporting(true);
      const data = await exportData();
      
      // Create and download file
      const blob = new Blob([data], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `financial-tracker-backup-${new Date().toISOString().split('T')[0]}.json`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
      
      alert('Data exported successfully!');
    } catch (error) {
      alert('Failed to export data');
    } finally {
      setIsExporting(false);
    }
  };

  const handleImport = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    try {
      setIsImporting(true);
      const text = await file.text();
      await importData(text);
      alert('Data imported successfully!');
    } catch (error) {
      alert('Failed to import data. Please check the file format.');
    } finally {
      setIsImporting(false);
      // Reset the input
      event.target.value = '';
    }
  };

  const handleClearData = async () => {
    const confirmed = window.confirm(
      'Are you sure you want to delete ALL data? This action cannot be undone.\n\nType "DELETE" in the next prompt to confirm.'
    );
    
    if (!confirmed) return;

    const confirmation = window.prompt(
      'Type "DELETE" to confirm you want to permanently delete all data:'
    );

    if (confirmation !== 'DELETE') {
      alert('Data deletion cancelled.');
      return;
    }

    try {
      setIsClearing(true);
      await clearAllData();
      alert('All data has been deleted.');
    } catch (error) {
      alert('Failed to clear data');
    } finally {
      setIsClearing(false);
    }
  };

  if (state.loading) {
    return <div className="loading">Loading...</div>;
  }

  return (
    <motion.div
      variants={settingsVariants}
      initial="hidden"
      animate="visible"
    >
      <motion.h1 
        className="mb-2 font-large font-bold"
        initial={{ opacity: 0, y: -30 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.3 }}
      >
        Settings
      </motion.h1>

      {/* Currency Settings */}
      <motion.div className="card" variants={cardVariants}>
        <h2 className="mb-1 font-bold">Appearance</h2>
        <div className="form-group">
          <label className="form-label">Theme</label>
          <ThemeToggle
            theme={state.settings.theme}
            onChange={handleThemeChange}
          />
        </div>
      </motion.div>

      {/* Currency Settings */}
      <motion.div className="card" variants={cardVariants}>
        <h2 className="mb-1 font-bold">Currency</h2>
        <div className="form-group">
          <label className="form-label">Display Currency</label>
          <Dropdown
            options={currencyOptions}
            value={state.settings.currency.code}
            onChange={handleCurrencyChange}
          />
        </div>
      </motion.div>

      {/* History Settings */}
      <motion.div className="card" variants={cardVariants}>
        <h2 className="mb-1 font-bold">History</h2>
        <div className="form-group">
          <label className="form-label">Keep history for (months)</label>
          <Dropdown
            options={retentionOptions}
            value={state.settings.historyRetentionMonths.toString()}
            onChange={(value) => handleRetentionChange(parseInt(value))}
          />
        </div>
        <p style={{ fontSize: '0.9rem', color: 'var(--color-text-secondary)', marginTop: '0.5rem' }}>
          Currently storing {state.budgets.length} month{state.budgets.length !== 1 ? 's' : ''} of data
        </p>
      </motion.div>

      {/* Data Management */}
      <motion.div className="card" variants={cardVariants}>
        <h2 className="mb-2 font-bold">Data Management</h2>
        
        {/* Export */}
        <div className="mb-2">
          <h3 className="mb-1 font-bold" style={{ fontSize: '1rem' }}>Export Data</h3>
          <p style={{ fontSize: '0.9rem', color: 'var(--color-text-secondary)', marginBottom: '1rem' }}>
            Download all your budget data as a JSON file for backup or transfer.
          </p>
          <motion.button
            className="mb-1 w-full button"
            onClick={handleExport}
            disabled={isExporting}
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
          >
            {isExporting ? 'Exporting...' : (
              <><Download size={16} style={{ display: 'inline', marginRight: '0.5rem' }} />Export Data (JSON)</>
            )}
          </motion.button>
          <motion.button
            className="w-full button button-secondary"
            onClick={handleExportFormatted}
            disabled={isExporting}
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
          >
            {isExporting ? 'Exporting...' : (
              <><FileText size={16} style={{ display: 'inline', marginRight: '0.5rem' }} />Export Summary (Text)</>
            )}
          </motion.button>
        </div>

        {/* Import */}
        <div className="mb-2">
          <h3 className="mb-1 font-bold" style={{ fontSize: '1rem' }}>Import Data</h3>
          <p style={{ fontSize: '0.9rem', color: 'var(--color-text-secondary)', marginBottom: '1rem' }}>
            Import budget data from a JSON file. This will replace all current data.
          </p>
          <motion.label 
            className="w-full button" 
            style={{ display: 'block', textAlign: 'center', cursor: 'pointer' }}
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
          >
            {isImporting ? 'Importing...' : (
              <><Upload size={16} style={{ display: 'inline', marginRight: '0.5rem' }} />Import Data</>
            )}
            <input
              type="file"
              accept=".json"
              onChange={handleImport}
              disabled={isImporting}
              style={{ display: 'none' }}
            />
          </motion.label>
        </div>

        {/* Clear Data */}
        <div>
          <h3 className="mb-1 font-bold" style={{ fontSize: '1rem' }}>Reset All Data</h3>
          <p style={{ fontSize: '0.9rem', color: 'var(--color-text-secondary)', marginBottom: '1rem' }}>
            Permanently delete all budget data. This action cannot be undone.
          </p>
          <motion.button
            className="w-full button button-danger"
            onClick={handleClearData}
            disabled={isClearing}
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
          >
            {isClearing ? 'Clearing...' : (
              <><Trash2 size={16} style={{ display: 'inline', marginRight: '0.5rem' }} />Delete All Data</>
            )}
          </motion.button>
        </div>
      </motion.div>

      {/* App Info */}
      <motion.div className="card" variants={cardVariants}>
        <h2 className="mb-1 font-bold">About</h2>
        <div style={{ fontSize: '0.9rem', color: 'var(--color-text-secondary)' }}>
          <VersionInfo />
        </div>
      </motion.div>

      {state.error && (
        <motion.div 
          className="error"
          variants={cardVariants}
        >
          {state.error}
        </motion.div>
      )}
    </motion.div>
  );
}
