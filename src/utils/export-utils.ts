import { MonthBudget } from '@/types';
import { formatMonth } from '@/utils/budget';

export function buildSummaryTextFilename(date: Date = new Date()) {
  return `financial-summary-${date.toISOString().split('T')[0]}.txt`;
}

export function buildBackupJsonFilename(date: Date = new Date()) {
  return `financial-tracker-backup-${date.toISOString().split('T')[0]}.json`;
}

export function formatSummaryText(budgets: MonthBudget[], formatCurrency: (n: number) => string) {
  let formattedText = '💰 FINANCIAL TRACKER SUMMARY\n';
  formattedText += '═══════════════════════════════\n\n';

  if (!budgets || budgets.length === 0) {
    formattedText += 'No budget data available.\n';
  } else {
    const sortedBudgets = [...budgets].sort((a, b) => b.month.localeCompare(a.month));

    sortedBudgets.forEach((budget) => {
      const monthName = formatMonth(budget.month);

      formattedText += `📅 ${monthName}\n`;
      formattedText += '─'.repeat(30) + '\n';

      const totalAllocated = budget.categories.reduce((sum, cat) => sum + cat.allocated, 0);
      const totalSpent = budget.categories.reduce((sum, cat) => sum + cat.spent, 0);
      const freeMoney = budget.spendingLimit - totalAllocated; // keep current app behavior for export

      formattedText += `💳 Monthly Limit: ${formatCurrency(budget.spendingLimit)}\n`;
      formattedText += `📊 Total Allocated: ${formatCurrency(totalAllocated)}\n`;
      formattedText += `💸 Total Spent: ${formatCurrency(totalSpent)}\n`;
      formattedText += `💰 Free Money: ${formatCurrency(freeMoney)}\n\n`;

      if (budget.categories.length > 0) {
        formattedText += '📋 CATEGORIES:\n';
        budget.categories.forEach((category) => {
          const remaining = category.allocated - category.spent;
          const percentage = category.allocated > 0 ? Math.round((category.spent / category.allocated) * 100) : 0;

          formattedText += `  • ${category.name}\n`;
          formattedText += `    Allocated: ${formatCurrency(category.allocated)}\n`;
          formattedText += `    Spent: ${formatCurrency(category.spent)} (${percentage}%)\n`;
          formattedText += `    Remaining: ${formatCurrency(remaining)}\n\n`;
        });
      }

      formattedText += '\n';
    });
  }

  formattedText += '\n💡 Generated by Financial Tracker PWA\n';
  formattedText += `📅 Export Date: ${new Date().toLocaleDateString()}\n`;

  return formattedText;
}

export function downloadTextFile(filename: string, text: string) {
  const blob = new Blob([text], { type: 'text/plain;charset=utf-8' });
  triggerDownload(blob, filename);
}

export function downloadJsonFile(filename: string, jsonString: string) {
  const blob = new Blob([jsonString], { type: 'application/json' });
  triggerDownload(blob, filename);
}

function triggerDownload(blob: Blob, filename: string) {
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
}
